<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:aop="http://www.springframework.org/schema/aop"  
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:tx="http://www.springframework.org/schema/tx"  
       xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:jms="http://www.springframework.org/schema/jms"
 	   xmlns:amq="http://activemq.apache.org/schema/core"       
       xsi:schemaLocation="  
           http://www.springframework.org/schema/aop   
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
           http://www.springframework.org/schema/beans   
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
           http://www.springframework.org/schema/data/jpa   
           http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd  
           http://www.springframework.org/schema/tx   
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd  
           http://www.springframework.org/schema/context   
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
		   http://activemq.apache.org/schema/core 
		   http://activemq.apache.org/schema/core/activemq-core.xsd
		   http://www.springframework.org/schema/jms 
		   http://www.springframework.org/schema/jms/spring-jms.xsd" >
		     	
  	<context:annotation-config />
	
	<context:component-scan base-package="com.habuma.spitter" />

	<bean id="spitterRmiRemoteService" 
	      class="org.springframework.remoting.rmi.RmiProxyFactoryBean"
	      p:serviceUrl="rmi://localhost/SpitterRmiRemoteService"
	      p:serviceInterface="com.habuma.spitter.remote.service.ISpitterRemoteService" /> 	
	
	<!-- 记得 Eclipse 环境中需要将 server.xml 中 server 的相对路径改为 / 否则回报找不到服务 -->  
	    
  	<bean id="spitterHessionRemoteService" 
     	  class="org.springframework.remoting.caucho.HessianProxyFactoryBean"
   		  p:serviceUrl="http://localhost:8080/spitter.hessian.service"
   		  p:serviceInterface="com.habuma.spitter.remote.service.ISpitterRemoteService" />   	  
   		  
  	<bean id="spitterBurlapRemoteService" 
     	  class="org.springframework.remoting.caucho.BurlapProxyFactoryBean"
   		  p:serviceUrl="http://localhost:8080/spitter.burlap.service"
   		  p:serviceInterface="com.habuma.spitter.remote.service.ISpitterRemoteService" />     		      

  	<bean id="spitterHttpInvokerRemoteService" 
     	  class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean"
   		  p:serviceUrl="http://localhost:8080/spitter.httpinvoker.service"
   		  p:serviceInterface="com.habuma.spitter.remote.service.ISpitterRemoteService" />    

 	<bean id="jaxwsRemoteService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"
		  p:wsdlDocumentUrl="http://localhost:8888/webservices/SpitterWebService?wsdl"
		  p:serviceName="SpitterWebService"
		  p:portName="SpitterWebServiceEndpointPort"
		  p:serviceInterface="com.habuma.spitter.remote.service.ISpitterRemoteService"
		  p:namespaceUri="http://service.remote.spitter.habuma.com/"
		  /> 

 	<bean id="jaxwsRemoteService2" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"
		  p:wsdlDocumentUrl="http://localhost:8888/webservices/SpitterRemoteService?wsdl"
		  p:serviceName="SpitterRemoteService"
		  p:portName="SpitterRemoteServiceImplPort"
		  p:serviceInterface="com.habuma.spitter.remote.service.ISpitterRemoteService"
		  p:namespaceUri="http://service.remote.spitter.habuma.com/"
		  /> 
		  	
	<!-- Uses the delegated Entry Point AccountServiceEndpoint-->	  
	<bean id="accountService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"
		  p:wsdlDocumentUrl="http://localhost:8888/webservices/AccountService?wsdl"
		  p:serviceName="AccountService"
		  p:portName="AccountServiceEndpointPort"
		  p:serviceInterface="org.shangyang.remote.service.IAccountService"
		  p:namespaceUri="http://service.remote.shangyang.org/"
		  />
		   			   		  
	<!-- Uses the direct Entry Point AccountServiceImpl-->
	<bean id="accountService2" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"
		  p:wsdlDocumentUrl="http://localhost:8888/webservices/AccountService2?wsdl"
		  p:serviceName="AccountService2"
		  p:portName="AccountServiceImplPort"
		  p:serviceInterface="org.shangyang.remote.service.IAccountService"
		  p:namespaceUri="http://service.remote.shangyang.org/"
		  />
	
	<!-- 若不使用 MQ Listener，如下的配置即可 -->
	<amq:connectionFactory id="connectionFactory" brokerURL="tcp://localhost:61616" />

	<amq:queue id="queue" physicalName="spitter.alert.queue" />
	
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
	 	 <property name="connectionFactory" ref="connectionFactory" />
	</bean>
	
	<!-- 如下定义使用 MQ Listener 的方式，注意新创建一个带有 trusted sources 的 ActiveMQConnectionFactory -->
	<!-- http://activemq.apache.org/objectmessage.html -->
	<bean id="connectionFactory2" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
	    <property name="brokerURL" value="tcp://localhost:61616"/>
	    <property name="trustedPackages">
	        <list>
	            <value>com.habuma.spitter.remote.dto</value>
	        </list>
	    </property>
	</bean>
	
<!--
	http://activemq.apache.org/objectmessage.html 把问题整复杂了，根本就不需要 CAMEL 介入
	
	<bean id="jmsConfig" class="org.apache.camel.component.jms.JmsConfiguration">
	    <property name="connectionFactory" ref="connectionFactory2"/>
	</bean>
	
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
	    <property name="configuration" ref="jmsConfig"/>
	</bean>
	
-->			
  	<bean id="spitterHandler" class="com.habuma.spitter.client.mq.SpitterAlertHandler" /> 
  	
	<!-- 定义 listener，当有消息的时候才回调 SpitterAlertHandler 提供的接口方法 -->	
  	<jms:listener-container connection-factory="connectionFactory2">
    	<jms:listener destination="spitter.alert.queue" ref="spitterHandler" method="processSpitter" />
  	</jms:listener-container>
 	
</beans>        